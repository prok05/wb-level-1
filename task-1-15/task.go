// L1.15

// К каким негативным последствиям может привести данный фрагмент кода, и как это исправить?
// Приведите корректный пример реализации.

//var justString string

//func someFunc() {
//v := createHugeString(1 << 10)
//justString = v[:100]
//}

//func main() {
//someFunc()
//}

// 1 проблема - использование глобальной переменной justString:
//      - делает программу сложнее для отладки если в пакете некоторые ф-ции будут ее использовать
//      - может возникнуть состояние гонки если эта переменная будет использоваться конкуретно
// 2 проблема (более "важная") - при создании среза justString (если это глобальная переменная) v будет оставаться в памяти
// даже после завершения работы someFunc. То есть произойдет утечка памяти

// Как я понимаю, существует 2 варианта решения:
//         - если оставлять глобальную переменную, то justString должна быть копией среза строки, чтобы сборщик мусора освободил v
//         - отказаться от глобальной переменной и сделать так, чтобы someFunc возвращала срез (что мне кажется более предпочтительным)

package main

import (
	"strings"
)

func createHugeString(size int) string {
	return strings.Repeat("a", size)
}

// 1 вариант:

var justString string

func someFunc() {
	v := createHugeString(1 << 10)
	justString = string(v[:100])
}

func main() {
	someFunc()
}

// 2 вариант

//func someFunc() string {
//	v := createHugeString(1 << 10)
//	return v[:100]
//}
//
//func main() {
//	str := someFunc()
//}
