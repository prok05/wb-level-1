// L1.5

// Разработать программу, которая будет последовательно отправлять значения в канал, а с другой стороны канала — читать.
// По истечению N секунд программа должна завершаться.

package main

import (
	"fmt"
	"math/rand"
	"time"
)

// сколько секунд будут работать горутины
const duration = 10 * time.Second

func main() {
	// создаем канал, в который будем последовательно отправлять значения
	values := make(chan int)

	// в отдельной горутине запускаем бесконечный цикл, который будет писать рандомное число в канал с интервалом в 1 секунду
	go func() {
		for {
			data := rand.Intn(10)
			values <- data
			time.Sleep(1 * time.Second)
		}
	}()

	// горутина, которая будет читать данные из канала values
	go func() {
		for {
			fmt.Printf("Читаем: %d \n", <-values)
		}
	}()

	// по истечению 10 секунд закрываем канал
	time.AfterFunc(duration, func() {
		close(values)
	})

	// успыпляем основной поток
	time.Sleep(duration + 1)

	fmt.Println("Программа завершила работу")
}
